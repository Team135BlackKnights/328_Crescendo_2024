// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.commands;

import frc.robot.RobotContainer;
import frc.robot.subsystems.mecanumSub;
import edu.wpi.first.math.kinematics.ChassisSpeeds;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.CommandBase;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import frc.robot.subsystems.mecanumSub;

import javax.sound.midi.MidiSystem;
import javax.swing.text.Position;
//i will reserch smart dashboard and what it does.

/** An example command that uses an example subsystem. */
public class mecanumDrive extends CommandBase {
  @SuppressWarnings({"PMD.UnusedPrivateField", "PMD.SingularField"})
  private final mecanumSub m_subsystem;


  /**
   * Creates a new ExampleCommand.
   *
   * @param subsystem The subsystem used by this command.
   */
  public mecanumDrive(mecanumSub subsystem) {
    m_subsystem = subsystem;
    ChassisSpeeds speeds;
    // Use addRequirements() here to declare subsystem dependencies.
    addRequirements(subsystem);
  }

  // Called when the command is initially scheduled.
  @Override
  public void initialize() {}

  // Called every time the scheduler runs while the command is scheduled.
  @Override
  public void execute() {
    double left = RobotContainer.m_driverController.getLeftY();
    double right = RobotContainer.m_driverController.getRightX();
    
    m_subsystem.mecanumDrive(left,right);

    if (Math.abs(RobotContainer.m_driverController.getLeftY()) > 0.15 || Math.abs(RobotContainer.m_driverController.getLeftY()) > 0.15);
    
    
    //trying to make it go faster but the buttion have errors i will try to fix it later.
    //if(RobotContainer.m_driverController.getAButton())
    //{
     // left=left*1.25;
     // right=right*1.25;
   // }
    
   // if(RobotContainer.m_driverController.getBButton()) 
   // {
    //  left=left*1.00;
   //   right=right*1.00;
   // }
   
  

    // this is a way to make it go faster 
    
}
    
    
  // Called once the command ends or is interrupted.
  @Override
  public void end(boolean interrupted) {}

  // Returns true when the command should end.
  @Override
  public boolean isFinished() {
    return false;
  }
  
}
